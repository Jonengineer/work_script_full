# Generated by Django 5.0 on 2024-08-27 09:14

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DictExpenditure',
            fields=[
                ('dict_expenditure_id', models.AutoField(primary_key=True, serialize=False)),
                ('dict_expense_type_id', models.IntegerField()),
                ('dict_expenditure_name', models.TextField()),
            ],
            options={
                'db_table': 'dict_expenditure',
            },
        ),
        migrations.CreateModel(
            name='DictSecChapter',
            fields=[
                ('dict_sec_chapter_id', models.AutoField(primary_key=True, serialize=False)),
                ('dict_sec_chapter_name', models.TextField()),
            ],
            options={
                'db_table': 'dict_sec_chapter',
            },
        ),
        migrations.CreateModel(
            name='Expense',
            fields=[
                ('expense_id', models.AutoField(primary_key=True, serialize=False)),
                ('dict_expenditure_id', models.IntegerField()),
                ('expense_value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('expense_name', models.TextField()),
            ],
            options={
                'db_table': 'expense',
            },
        ),
        migrations.CreateModel(
            name='ExpensesToEpcMap',
            fields=[
                ('expenses_to_epc_map_id', models.AutoField(primary_key=True, serialize=False)),
                ('expenses_to_epc_map_name', models.TextField()),
                ('expenses_to_epc_map_epc', models.TextField()),
            ],
            options={
                'db_table': 'expenses_to_epc_map',
            },
        ),
        migrations.CreateModel(
            name='LocalCostEstimate',
            fields=[
                ('local_cost_estimate_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'local_cost_estimate',
            },
        ),
        migrations.CreateModel(
            name='ObjectCostEstimate',
            fields=[
                ('object_cost_estimate_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'object_cost_estimate',
            },
        ),
        migrations.CreateModel(
            name='SummaryEstimateCalculation',
            fields=[
                ('summary_estimate_calculation_id', models.AutoField(primary_key=True, serialize=False)),
                ('object_id', models.IntegerField()),
                ('sum_est_calc_mrid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('sum_est_calc_before_ded', models.BooleanField()),
            ],
            options={
                'db_table': 'summary_estimate_calculation',
            },
        ),
        migrations.CreateModel(
            name='TempTableUNC',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('project_id', models.TextField()),
                ('project_name', models.TextField()),
                ('name_unc', models.TextField()),
                ('name_object', models.TextField()),
                ('voltage', models.TextField()),
                ('TX', models.TextField()),
                ('count', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('unit', models.TextField()),
                ('unc_code', models.TextField()),
            ],
            options={
                'db_table': 'temp_table_unc',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ExpensesByEpc',
            fields=[
                ('expenses_by_epc_id', models.AutoField(primary_key=True, serialize=False)),
                ('epc_costs_id', models.IntegerField()),
                ('dict_typical_epc_work_id', models.IntegerField()),
                ('dict_budgeting_id', models.IntegerField()),
                ('expenses_by_epc_name', models.TextField()),
                ('expense', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.expense')),
                ('expenses_to_epc_map', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.expensestoepcmap')),
            ],
            options={
                'db_table': 'expenses_by_epc',
            },
        ),
        migrations.AddField(
            model_name='expense',
            name='local_cost_estimate',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.localcostestimate'),
        ),
        migrations.CreateModel(
            name='ObjectAnalog',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('project_id', models.TextField()),
                ('project_name', models.TextField()),
                ('object_costEstimate_id', models.TextField()),
                ('local_costEstimate_id', models.TextField()),
                ('expenses_name', models.TextField()),
                ('quarter', models.TextField()),
                ('construction_cost', models.TextField(blank=True, null=True, verbose_name='Стоимость строительных работ')),
                ('installation_cost', models.TextField(blank=True, null=True, verbose_name='Стоимость монтажных работ')),
                ('equipment_cost', models.TextField(blank=True, null=True, verbose_name='Стоимость оборудования, мебели, инвентаря')),
                ('other_cost', models.TextField(blank=True, null=True, verbose_name='Стоимость прочих затрат')),
                ('total_cost', models.TextField(blank=True, null=True, verbose_name='Общая сметная стоимость')),
                ('unc_code', models.TextField()),
                ('name_unc', models.TextField()),
                ('name_object', models.TextField()),
                ('voltage', models.TextField()),
                ('TX', models.TextField()),
                ('count', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('unit', models.TextField()),
                ('matched_keyword', models.TextField()),
                ('additional_info', models.TextField(blank=True, null=True)),
                ('is_check', models.BooleanField(default=False, verbose_name='Проверено')),
                ('description', models.TextField(blank=True, null=True)),
                ('chapter_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.dictsecchapter')),
            ],
            options={
                'db_table': 'object_analog',
            },
        ),
        migrations.AddField(
            model_name='localcostestimate',
            name='object_cost_estimate',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.objectcostestimate'),
        ),
        migrations.AddField(
            model_name='expense',
            name='object_cost_estimate',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.objectcostestimate'),
        ),
        migrations.AddField(
            model_name='objectcostestimate',
            name='summary_estimate_calculation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.summaryestimatecalculation'),
        ),
        migrations.AddField(
            model_name='localcostestimate',
            name='summary_estimate_calculation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.summaryestimatecalculation'),
        ),
        migrations.AddField(
            model_name='expense',
            name='summary_estimate_calculation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.summaryestimatecalculation'),
        ),
        migrations.CreateModel(
            name='TempTable',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('project_id', models.TextField()),
                ('object_costEstimate_id', models.TextField(blank=True, null=True)),
                ('local_costEstimate_id', models.TextField()),
                ('expenses_name', models.TextField()),
                ('quarter', models.TextField(blank=True, null=True)),
                ('construction_cost', models.TextField(blank=True, null=True, verbose_name='Стоимость строительных работ')),
                ('installation_cost', models.TextField(blank=True, null=True, verbose_name='Стоимость монтажных работ')),
                ('equipment_cost', models.TextField(blank=True, null=True, verbose_name='Стоимость оборудования, мебели, инвентаря')),
                ('other_cost', models.TextField(blank=True, null=True, verbose_name='Стоимость прочих затрат')),
                ('total_cost', models.TextField(blank=True, null=True, verbose_name='Общая сметная стоимость')),
                ('chapter_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.dictsecchapter')),
            ],
            options={
                'db_table': 'temp_table',
            },
        ),
        migrations.CreateModel(
            name='TempTableССКUNC',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('matched_keyword', models.TextField()),
                ('additional_info', models.TextField(blank=True, null=True)),
                ('temp_table_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.temptable')),
                ('temp_table_unc_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.temptableunc')),
            ],
            options={
                'db_table': 'temp_table_cck_unc',
            },
        ),
    ]
