

# АРХИВ
# Связывание
def add_UNC_CCR(request):
    try:
        # Шаг 1: Загрузка всех ключевых слов из справочника
        key_phrases = ExpensesToEpcMap.objects.all()
    except Exception as e:
        messages.error(request, f"Ошибка при загрузке ключевых слов из справочника: {e}")
        return redirect('myapp:CCP_UNC_page')

    unc_keyword_map = {}
    try:
        # Шаг 2: Проход по записям TempTableUNC и определение ключевых слов
        for unc_record in TempTableUNC.objects.all():
            matching_keywords = []
            cleaned_name_unc = clean_string(unc_record.name_unc)
            for key_phrase in key_phrases:
                cleaned_key_phrase = clean_string(key_phrase.expenses_to_epc_map_epc)                
                if cleaned_key_phrase in cleaned_name_unc:             
                    matching_keywords.append((clean_string(key_phrase.expenses_to_epc_map_nme), clean_string(key_phrase.expenses_to_epc_map_epc), key_phrase))

            if matching_keywords:
                unc_keyword_map[unc_record] = matching_keywords            

    except Exception as e:
        messages.error(request, f"Ошибка при определении ключевых слов: {e}")
        return redirect('myapp:CCP_UNC_page')
    
    try:
        # Шаг 3: Проход по записям TempTable и поиск соответствий
        for unc_record, keywords in unc_keyword_map.items():
            for keyword, keyword_2, key_phrase_obj in keywords:
                for temp_record in TempTable.objects.all():
                    if temp_record.object_costEstimate_id != '0':
                        continue

                    cleaned_expenses_name = clean_string(temp_record.expenses_name)             

                    if keyword in cleaned_expenses_name:
                        print(f"Найдено соответствие: {temp_record}")

                        # Проверка на наличие дубликатов
                        existing_record = TempTableССКUNC.objects.filter(
                            temp_table_id=temp_record,
                            temp_table_unc_id=unc_record,
                        ).exists()

                        # Шаг 4: Сохранение результата в TempTableССКUNC
                        if not existing_record:
                            TempTableССКUNC.objects.create(
                                temp_table_id=temp_record,
                                temp_table_unc_id=unc_record,
                                matched_keyword=keyword,
                                additional_info=f"ТХ: {keyword_2}",
                                key_id=key_phrase_obj,
                            )
    except Exception as e:
        messages.error(request, f"Ошибка при сохранении результатов: {e}")
        return redirect('myapp:CCP_UNC_page')

    messages.success(request, "Процесс сопоставления успешно завершен. Сохраните объект")
    return redirect('myapp:CCP_UNC_page')

# Связывание_2
def add_UNC_CCR_2(request, project):
    try:
        # Шаг 1: Загрузка всех ключевых слов из справочника
        key_phrases = ExpensesToEpcMap.objects.all()
    except Exception as e:
        messages.error(request, f"Ошибка при загрузке ключевых слов из справочника: {e}")
        return redirect('myapp:CCP_UNC_page')

    unc_keyword_map = {}
    try:
        # Шаг 2: Проход по записям EpcCosts и определение ключевых слов
        epc_costs_records = EpcCosts.objects.filter(object__invest_project=project)
        for epc_cost_record in epc_costs_records:
            matching_keywords = []
            cleaned_name_unc = clean_string(epc_cost_record.name_unc)            
            for key_phrase in key_phrases:
                cleaned_key_phrase = clean_string(key_phrase.expenses_to_epc_map_epc)
                if cleaned_key_phrase in cleaned_name_unc:                    
                    matching_keywords.append((clean_string(key_phrase.expenses_to_epc_map_nme), cleaned_key_phrase, key_phrase))

            if matching_keywords:
                unc_keyword_map[epc_cost_record] = matching_keywords                

    except Exception as e:
        messages.error(request, f"Ошибка при определении ключевых слов: {e}")
        return redirect('myapp:CCP_UNC_page')

    try:
        # Шаг 3: Проход по записям Expenses и поиск соответствий
        expenses_records = Expenses.objects.filter(summary_estimate_calculation__invest_project=project)
        for epc_cost_record, keywords in unc_keyword_map.items():
            for keyword, keyword_2, key_phrase_obj in keywords:
                for expense_record in expenses_records:

                    # Пропускаем записи, у которых заполнено поле object_cost_estimate
                    if expense_record.object_cost_estimate is not None:
                        continue

                    cleaned_expenses_name = clean_string(expense_record.expense_nme)

                    if keyword in cleaned_expenses_name:

                        # Проверка на наличие дубликатов
                        existing_record = ExpensesByEpc.objects.filter(
                            epc_costs_id=epc_cost_record,
                            expense_id=expense_record.expense_id,
                        ).exists()

                        # Шаг 4: Сохранение результата в ExpensesByEpc
                        if not existing_record:
                            try:
                                ExpensesByEpc.objects.create(
                                    epc_costs_id=epc_cost_record,
                                    expense_id=expense_record,
                                    dict_typical_epc_work_id=None,
                                    dict_budgeting_id=None,
                                    expenses_to_epc_map_id=key_phrase_obj,
                                    expenses_by_epc_nme=keyword,
                                )

                            except Exception as e:
                                messages.error(request, f"Ошибка при сохранении: {e}")                            
    except Exception as e:
        messages.error(request, f"Ошибка при сохранении результатов: {e}")
        return redirect('myapp:CCP_UNC_page')

    messages.success(request, "Процесс сопоставления успешно завершен. Объект аналог сохранен")
    return redirect('myapp:CCP_UNC_page')

# Очистка списка связывания
def delete_CCR_UNC(request):
    if request.method == 'POST':
        # Удаляем все записи из TempTableССКUNC
        TempTableССКUNC.objects.all().delete()

        # Перенаправляем пользователя после удаления
        # Замените 'some_page' на нужный URL или название маршрута
        return redirect('myapp:CCP_UNC_page')
    else:
        # Замените 'some_page' на нужный URL или название маршрута
        return redirect('myapp:CCP_UNC_page')
    
# Сохранение объекта аналога
def add_object_analog(request):
    # Получаем все записи
    all_temp_records = TempTable.objects.all()
    all_CCP_UNC = TempTableССКUNC.objects.all()

    # Получаем все записи из TempTableССКUNC, чтобы исключить связанные позиции
    linked_temp_records_ids = TempTableССКUNC.objects.values_list('temp_table_id', flat=True)

    try:
        for linked_record in all_CCP_UNC:
            project_id_unc = linked_record.temp_table_unc_id.project_id
            if ObjectAnalog.objects.filter(project_id=project_id_unc).exists():
                messages.error(request, f"Данный проект {project_id_unc} уже есть в базе")
                return redirect('myapp:CCP_UNC_page')

        with transaction.atomic():  # Используем транзакцию для атомарности операции
            # Проходим по всем связанным позициям
            for linked_record in all_CCP_UNC:
                temp_table_record = linked_record.temp_table_id
                temp_table_unc_record = linked_record.temp_table_unc_id
                project_name_unc = temp_table_unc_record.project_name
                project_id_unc = temp_table_unc_record.project_id
                key_id = linked_record.key_id
                matched_keyword = linked_record.matched_keyword
                additional_info = linked_record.additional_info

                # Если проект не существует, продолжаем добавление
                if temp_table_record.expenses_name and temp_table_record.expenses_name.strip() and temp_table_record.expenses_name.lower() != 'nan':
                    # Создаем объект ObjectAnalog для каждой связанной позиции
                    ObjectAnalog.objects.create(
                        project_id=project_id_unc,
                        project_name=project_name_unc,
                        chapter_id=temp_table_record.chapter_id,
                        object_costEstimate_id=temp_table_record.object_costEstimate_id,
                        local_costEstimate_id=temp_table_record.local_costEstimate_id,
                        expenses_name=temp_table_record.expenses_name,
                        quarter=temp_table_record.quarter,
                        construction_cost=temp_table_record.construction_cost,
                        installation_cost=temp_table_record.installation_cost,
                        equipment_cost=temp_table_record.equipment_cost,
                        other_cost=temp_table_record.other_cost,
                        total_cost=temp_table_record.total_cost,
                        unc_code=temp_table_unc_record.unc_code,
                        name_unc=temp_table_unc_record.name_unc,
                        name_object=temp_table_unc_record.name_object,
                        voltage=temp_table_unc_record.voltage,
                        TX=temp_table_unc_record.TX,
                        count=temp_table_unc_record.count,
                        unit=temp_table_unc_record.unit,
                        matched_keyword=matched_keyword,
                        additional_info=additional_info,
                        key_id=key_id, 
                    )

            # Проходим по всем несвязанным позициям из TempTable, которые не имеют связей с TempTableUNC
            unlinked_temp_records = all_temp_records.exclude(
                id__in=linked_temp_records_ids)

            for unlinked_record in unlinked_temp_records:
                if unlinked_record.expenses_name and unlinked_record.expenses_name.strip() and unlinked_record.expenses_name.lower() != 'nan':
                    # Создаем объект ObjectAnalog только с данными из TempTable, без привязки к УНЦ
                    ObjectAnalog.objects.create(
                        project_id=project_id_unc,
                        # Здесь можно оставить пустым или заполнить, если есть данные
                        project_name=project_name_unc,
                        chapter_id=unlinked_record.chapter_id,
                        object_costEstimate_id=unlinked_record.object_costEstimate_id,
                        local_costEstimate_id=unlinked_record.local_costEstimate_id,
                        expenses_name=unlinked_record.expenses_name,
                        quarter=unlinked_record.quarter,
                        construction_cost=unlinked_record.construction_cost,
                        installation_cost=unlinked_record.installation_cost,
                        equipment_cost=unlinked_record.equipment_cost,
                        other_cost=unlinked_record.other_cost,
                        total_cost=unlinked_record.total_cost,
                        unc_code="",
                        name_unc="",
                        name_object="",
                        voltage="",
                        TX="",
                        count=None,
                        unit="",
                        matched_keyword="",
                        additional_info="",
                    )
                else:
                    print('Строка пустая')

        # Если операция завершена успешно, можно вернуть соответствующее сообщение
        messages.success(request, f"Объект аналог успешно сохранен")
        return redirect('myapp:CCP_UNC_page')

    except Exception as e:
        # Если произошла ошибка, транзакция будет откатана
        messages.error(request, f"Ошибка в сохранении объекта аналога {e}")
        return redirect('myapp:CCP_UNC_page')

# Сохранение всех строк ОА
def save_all_object_analogs(request, project_id):
    if request.method == 'POST':
        all_object_analog = ObjectAnalog.objects.filter(project_id=project_id)

        for record in all_object_analog:
            # Проверяем наличие флага проверки
            is_checked = f'is_check_{record.id}' in request.POST
            description = request.POST.get(f'description_{record.id}', '')

            # Обновляем данные
            record.is_check = is_checked
            record.description = description
            record.save()

        messages.success(request, "Все изменения сохранены.")
        return redirect('myapp:object_analog_content', project_id=project_id)

# Объектs аналог
def object_analog(request):
    # Получаем список уникальных проектов с подсчетом количества строк для каждого проекта
    project_list = (
        ObjectAnalog.objects
        .values('project_id', 'project_name')
        .annotate(total_records=Count('id'))
        .annotate(num_records=Count('id'))
        .annotate(num_records_TX=Count('TX', filter=Q(TX__isnull=False) & ~Q(TX='')))
        .annotate(num_checked=Count('is_check', filter=Q(is_check=True)))
        .order_by('project_id')
    )

    context = {
        'project_list': project_list,
    }

    return render(request, 'object_anlog.html', context)




# Содержание Объекта аналога
def object_analog_content(request, project_id):
    # Фильтрация строк по идентификатору проекта и сортировка по идентификатору главы
    all_object_analog = ObjectAnalog.objects.filter(project_id=project_id).order_by('chapter_id')
    
    context = {
        'all_object_analog': all_object_analog,
        'project_id': project_id
    }
    print(f' id {project_id}')

    return render(request, 'object_anlog_content.html', context)



    def delete_object_analog(request, project_id):
    try:
        # Удаляем все записи, связанные с данным проектом
        deleted_count, _ = ObjectAnalog.objects.filter(project_id=project_id).delete()

        # Сообщаем пользователю об успешном удалении
    except Exception as e:
        # Если произошла ошибка, сообщаем об этом пользователю
        messages.error(
            request, f"Ошибка при удалении записей для проекта с ID {project_id}: {e}")

    # Перенаправляем пользователя на страницу после выполнения операции
    messages.success(
        request, f"Успешно удалено {deleted_count} записей для проекта с ID {project_id}")
    # Укажите правильный URL-имя для редиректа
    return redirect('myapp:object_analog')